%title Merlin 0.0.6
%date 2015-07-27
%subtitle Conditional Expressions

This revision brings Merlin one step closer from "ridiculously
overengineered calculator" to "programming language implementation"
by adding *conditional expressions*. Although a significant 
feature, the implementation is very simple.

As I mentioned in the last revision, the interpreter supports both
`if` and `cond` now (`cond` makes for much more succinct and readable
code in heavily branchy programs like compilers), but the compiler
only supports `if`. This is deliberate: Given a macro system, it's 
relatively easy to translate one to the other; either an `if` can
be translated to a simple two-branch `cond`, or a `cond` can
translate to a chain of nested `if`s. Given that it seems backwards
and perverse to translate a simple construct like `if` to a more
complex one like `cond`, I've opted to let `if` be the core construct
and `cond` the library one.

One difference between Merlin `if` and the `if` in some other Lisps
is that Merlin `if` requires both the consequent ("then") and the
alternative ("else") branch: Single-branch `if` is generally useful
only for side effects, and thus makes little sense in a
purely-functional language. If I ever *really* need single-branch 
`if`, it'd be easy enough to simply have the alternative 
return `()`, or some other default value.

Happily, translating `if` to JavaScript is straightforward. JS' own
`if` is a statement, not an expression, and thus can't be used in all
the contexts where a Merlin `if` may occur. However, JS provides a
*ternary expression* (`?:`), like most languages in the curly-brace
family, which is a perfect match for Merlin two-branch `if`: 
    
    (if foo bar qux)

translates to the JavaScript expression:

    ((foo !== null) ? bar : qux)

The explicit `!== null` is there to ensure correct behaviour
according to Merlin's Boolean rules (in which only `()` is considered
a false value). The JS expression `(foo ? bar : qux)` would return
`qux` if `foo == 0`, whereas the Merlin expression `(if foo bar qux)`
should return `bar` in that case.

No modifications to the runtime or interpreter were necessary for
this revision; only the compiler and test cases have been changed.

Download
========
tar.gz: [merlin-0.0.6.tar.gz](files/merlin-0.0.6.tar.gz)  
MD5: `842796ccc67d130ef1f3cd88f16db313`  
SHA256: `06624ae424fe59694335a932428e541bb5e7290b0e4b581d57d6261df04a526f`

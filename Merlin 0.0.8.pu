%title Merlin 0.0.8
%date 2015-08-01
%subtitle Improper lists eliminated

This revision extirpates improper lists from the language. Reflecting
on [[Merlin 0.0.7|yesterday's revision notes]]: I think improper
lists are a phenomenally ill-advised language feature, and their
inclusion will inevitably weaken a language with frustrating corner
cases and needless worries. They do have uses - as I mentioned
yesterday - but if it isn't possible to implement those uses sanely
without such an ugly language feature, then *they don't belong in my
language*. Thus, if I want pattern matching and variadic functions 
(which I do), then I must invent a notation to support them well in a
Lisp that doesn't have dotted lists.

I have implemented a type constraint on `cons`, such that its second
argument must be a list (whether the empty list `()` or a constructed
list of any length). Since I'm still snarfing the reader from Scheme,
it's still possible to construct improper dotted lists syntactically,
such as `(a . b)`, but when a later revision implements the Merlin
reader, that reader will not implement the dot notation.

As a side benefit, this will allow me to make some optimizations on
the list representation later on that wouldn't be possible otherwise.

Download
========
tar.gz: [merlin-0.0.8.tar.gz](files/merlin-0.0.8.tar.gz)  
MD5: `d557c55deaa57164c1c12f691c10614a`  
SHA256: `697c7ee430179bb8b9ef0270ceadd10d6cb9c425abebf2b4f95e8e271cdba548`

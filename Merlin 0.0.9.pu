%title Merlin 0.0.9
%date 2015-08-04
%subtitle Function calls & environment

This revision refactors the compiler to lay the groundwork for a full
implementation of Merlin functions. As in most Lisps (particularly
the statically scoped Lisps), functions are the central abstraction
in the language, and because they are such a powerful construct, they
are used in many different roles --- control flow, name binding,
and complex data structures, among many other things. In this
non-optimizing first implementation of the compiler, I make no
special effort to inline or otherwise optimize functions --- a step
that will be essential in creating a high-performance Lisp. In a later
stage, I intend to implement a variation of the 
*strategy analysis* implemented in the early 
Scheme implementation
[Orbit](https://www.cs.purdue.edu/homes/suresh/590s-Fall2002/papers/Orbit.pdf).

The primary changes in this revision are as follows:

* A rudimentary *environment* is introduced. In this revision, the
  environment only has functions, and is non-extensible. It's
  essentially one giant environment frame.
* The `unary-primitive` and `binary-primitive` recognizers are
  removed, and replaced with a `function-call` one.
* A `function-call` emitter is introduced. This looks up a function
  by name and arity and calls the associated JavaScript emitter.
* All built-in operators (except special forms) are now function
  calls.

The next few revisions will expand on this work to introduce full
functions.

Download
========
tar.gz: [merlin-0.0.9.tar.gz](files/merlin-0.0.9.tar.gz)  
MD5: `2c60644613f59cb45ba30d2937601d2b`  
SHA256: `b93d18a08b245ee1ae5e999974d8661328f750e9d56dbf33f4683997f545d8d0`

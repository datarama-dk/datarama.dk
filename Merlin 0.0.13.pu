%title Merlin 0.0.13
%date 2015-08-11
%subtitle S-Expression Reader

This revision extends the compiler with a reader, and removes
the interpreter's earlier call to the Scheme reader for
parsing input arguments. In other words, where previous
revisions would compile pre-parsed S-expressions, this one
can now compile *string representations* of S-expressions to
JavaScript. This removes one of the final dependencies on
Scheme, and is a major step on the way to a fully self-hosted
implementation.

The reader itself is relatively simple, as is to be expected
in a Lisp. Much like what might be found in a Compiler
Construction 101 textbook, it consists of a lexer and a
parser. The lexer is a simple finite automaton written in
tail-recursive style, considerably more elegant than any
handwritten lexer I've written in C. As an aside, I remain
convinced that finite automaton construction is the only
legitimate high-level use of `goto` in portable C, and the
most clear way to build a finite automaton in C. The parser
is a top-down, recursive descent parser, suitable for the
LL(1) grammar of Lisp.

It currently lacks a few advanced features, such as numbers
in scientific notation, but it implements all the basic 
features I need: 

* Numbers (including negative and floating-point numbers)
* Lists with arbitrary nesting
* Strings delimited by double quotes
* Comments 
* Identifiers (any sequence of characters that isn't any of
  the above)

Unlike most Scheme `read` procedures, mine operates on strings
rather than port objects (which Merlin doesn't have), and is
purely functional. Unfortunately, the purely functional model
is a source of some awkwardness here, as I've had to
explicitly thread a "rest of the string" variable around. 
The lexer returns `(token rest-of-string)` 2-element lists 
rather than simply tokens, for this reason. There's no simple
fix for this (short of implementing coroutines or
continuations), but the actual handling of these lists could
be simplified and clarified considerably using pattern 
matching. Fortunately, that'll be one of the later revisions.

At the moment I'm concentrating on finishing up all the 
features necessary to bootstrap a self-hosting compiler for
the core language; I don't want to waste my time implementing
cool language extensions (such as pattern matching) in *both*
a compiler and a throw-away interpreter.

Download
========
tar.gz: [merlin-0.0.13.tar.gz](files/merlin-0.0.13.tar.gz)  
MD5: `6a9c50feda5854b672f7c3ab4ffad4ec`  
SHA256: `665bb23859d6ee58d77dfc90cdbe5131b4c4859f36c67e2747d41681e8de6d16`

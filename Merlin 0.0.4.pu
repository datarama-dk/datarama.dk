%title Merlin 0.0.4
%date 2015-07-25
%subtitle Unary Primitives

This revision adds the set of *unary primitives*, eg. primitives
with only one argument. Unary primitives on the currently supported
types (numbers, strings and null) include negation (`not` and unary
minus), type predicates and type conversions. This revision
therefore also marks the beginning of our descent into the various
[horrors and absurdities of the JavaScript type system](https://www.destroyallsoftware.com/talks/wat).

JavaScript (in)famously features a style of pervasive, aggressive
automatic type coercion that renders simple equational reasoning
all but impossible and leads to all sorts of bizarre results and
apparently arbitrary special cases. In JavaScript: 

* `42 - "42" == 0`, but `"21" + 21 == "2121"`. 
* `0 == "0"`, but `0` is a false value and `"0"` a true one.
* `null + 69 == 69` 
* `null + "" == "null"`
  
Merlin, in contrast, regards its types as disjoint sets, and those
operations as errors.  This means that most of the type-related
operations need a little more work to translate correctly (and why
this revision includes a large battery of tests for various
JS-related hilarity).

Furthermore, Merlin and JavaScript differ in their models of truth
and falsity. Merlin has no dedicated Boolean type, and considers 
the null value `()` to be the only false value. JavaScript *has* a
dedicated Boolean type, but considers both `0`, `null`, `false`, 
`undefined` and `[]` (but *not* `""`) to be false values. In other
words, the Merlin expression `(not x)` can't simply translate to 
`!(x)`. For current testing purposes, I'm using the string `"true"`
as the canonical true value --- in the interpreter, I used the
symbol `T`. The compiler will also use `T` once it supports symbols.

This revision includes the first rudimentary implementation of a
Merlin runtime, currently for use with `node.js` (it uses a few
Node-specific constructs to ease testing, and therefore isn't
currently browser-friendly). The runtime contains a few auxiliary
functions that help reduce code size: `not(x)` takes up
significantly fewer bytes than `(x === null) ? "true" : null` does.

Download
========
tar.gz: [merlin-0.0.4.tar.gz](files/merlin-0.0.4.tar.gz)  
MD5: `4f15181d16c516a96ec4e5bb1961ef1a`  
SHA256: `51ed5df8ed5a440d741093a278f5a28d0acc78bd921925d1310ff608c82e56a0`

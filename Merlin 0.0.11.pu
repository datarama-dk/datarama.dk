%title Merlin 0.0.11
%date 2015-08-05
%subtitle Lisp-1 namespace semantics

This revision substantially simplifies the compiler, by replacing all
the primitive operator emitters with functions defined in the runtime
--- for example, the compiler now produces `add(x,y)` rather than
`x+y`. This makes it very easy to have a consistent treatment of 
primitive vs. user-defined functions, and turns all Merlin's
primitive functions into first-class values. This possibly introduces
a performance regression, depending on how smart the underlying
JavaScript implementation is at inlining very small function calls.

I don't care at this point, though. The purpose of this generation of
the compiler isn't to be *efficient*, it's to be *correct* and as
simple as I can get it. I'll build an optimizing version in a later
phase.

Another simplification is in the handling of function calls, enabled
by the aforementioned simplification of the primitive functions. The
compiler now simply compiles the operator position of a function call
with exactly the same compilation rules as each of the operands. An 
identifier in the operator position is just a variable that gets 
looked up like any other variable; if it evaluates to a function, 
then it gets called with the operands as parameters (and if not, the
expression is an error).

This means that Merlin now has only a single namespace for all 
functions and values, making it a
[Lisp-1](http://www.nhplace.com/kent/Papers/Technical-Issues.html)
--- like Scheme and Clojure, but unlike Common Lisp.  Quoting Richard
Gabriel: 

> Lisp-1 has a single namespace that serves a dual role as the
> function namespace and value namespace; that is, its function
> namespace and value namespace are not distinct. In Lisp-1, the
> functional position of a form and the argument positions of forms
> are evaluated according to the same rules. 
> 
> Lisp-2 has distinct function and value namespaces. In Lisp-2, the
> rules for evaluation in the functional position of a form are
> distinct from those for evaluation in the argument positions of the
> form. Common Lisp is a Lisp-2 dialect. 

I find that Lisp-2s are much more awkward for functional programming,
but can get by with much simpler macro systems than Lisp-1s; because
I intend Merlin to primarily focus on functional programming, I find
that Lisp-1 is the best basic namespace model for it. I also like its
conceptual simplicity.

Download
========
tar.gz: [merlin-0.0.11.tar.gz](files/merlin-0.0.11.tar.gz)  
MD5: `abc86706edf9d0b2750553ce14707797`  
SHA256: `312d47e60416598ad203691715f6c8782e88c181fa200c39eaa2f6f9e39c2bfd`
